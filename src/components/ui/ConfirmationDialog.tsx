// src/components/ui/ConfirmationDialog.tsx import { AlertTriangle, Trash2, X, Save, Download, RefreshCw, Archive } from 'lucide-react'; import React, { useState } from 'react'; // ========================================== // BASE CONFIRMATION DIALOG // ========================================== interface ConfirmationDialogProps { isOpen: boolean; onClose: () => void; onConfirm: () => void; title: string; message: string; confirmText?: string; cancelText?: string; variant?: 'danger' | 'warning' | 'info' | 'success'; icon?: React.ComponentType<{ className?: string }>; requiresTyping?: string; // Require typing this text to confirm isLoading?: boolean; details?: string[]; } export const ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({ isOpen, _onClose, _onConfirm, _title, _message, _confirmText = 'Confirm', _cancelText = 'Cancel', _variant = 'danger', _icon: CustomIcon, _requiresTyping, _isLoading = false, _details,  }) => { const [typedText, setTypedText] = useState(''); const [isConfirmEnabled, setIsConfirmEnabled] = useState(!requiresTyping); React.useEffect(() => { if (requiresTyping) { setIsConfirmEnabled(typedText.toLowerCase() === requiresTyping.toLowerCase()); } else { setIsConfirmEnabled(true); } }, [typedText, requiresTyping]); React.useEffect(() => { if (isOpen) { setTypedText(''); } }, [isOpen]); // Handle escape key React.useEffect(() => { const handleEscape = (_e: KeyboardEvent) => { if (e.key === 'Escape' && isOpen && !isLoading) { onClose(); } }; document.addEventListener('keydown', handleEscape); return () => document.removeEventListener('keydown', handleEscape); }, [isOpen, isLoading, onClose]); if (!isOpen) return null; const variantConfig = { danger: { bgColor: 'bg-red-50', iconColor: 'text-red-600', buttonColor: 'bg-red-600 hover:bg-red-700 focus:ring-red-500', icon: AlertTriangle, }, warning: { bgColor: 'bg-amber-50', iconColor: 'text-amber-600', buttonColor: 'bg-amber-600 hover:bg-amber-700 focus:ring-amber-500', icon: AlertTriangle, }, info: { bgColor: 'bg-blue-50', iconColor: 'text-blue-600', buttonColor: 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500', icon: AlertTriangle, }, success: { bgColor: 'bg-green-50', iconColor: 'text-green-600', buttonColor: 'bg-green-600 hover:bg-green-700 focus:ring-green-500', icon: AlertTriangle, }, }; const config = variantConfig[variant]; const Icon = CustomIcon || config.icon; const handleConfirm = () => { if (isConfirmEnabled && !isLoading) { onConfirm(); } }; return ( <div className="fixed inset-0 z-50 grid place-items-center"> <div className="absolute inset-0 bg-black/40" /> <div className="relative w-full max-w-lg rounded-2xl bg-white p-6 shadow-xl ring-1 ring-black/5" role="dialog" aria-modal="true" > {/* Header */} <div className="flex items-center justify-between pb-4"> <div className="flex items-center gap-3"> <div className={`p-2 rounded-lg ${config.bgColor}`}> <Icon className={`w-6 h-6 ${config.iconColor}`} /> </div> <h3 className="text-lg font-semibold text-inkwell-navy">{title}</h3> </div> <button onClick={onClose} disabled={isLoading} className="text-slate-500 hover:text-inkwell-navy disabled:opacity-50" > <X className="w-5 h-5" /> </button> </div> {/* Content */} <div className="pb-6"> <p className="text-slate-700 mb-4">{message}</p> {/* Details */} {details && details.length > 0 && ( <div className="mb-4 p-3 bg-slate-50 rounded-lg"> <div className="text-sm text-slate-700"> <strong>This will:</strong> <ul className="mt-1 list-disc list-inside space-y-1"> {details.map((detail, _index) => ( <li key={index}>{detail}</li> ))} </ul> </div> </div> )} {/* Typing confirmation */} {requiresTyping && ( <div className="mb-4"> <label className="block text-sm font-medium text-slate-700 mb-2"> Type "{requiresTyping}" to confirm: </label> <input type="text" value={typedText} onChange={(e) => setTypedText(e.target.value)} className="w-full px-3 py-2 border border-slate-300 rounded-lg bg-white text-slate-900 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder={requiresTyping} disabled={isLoading} autoFocus /> </div> )} {/* Actions */} <div className="flex items-center gap-3 mt-6"> <button className="ink-btn ink-btn-primary">OK</button> <button onClick={onClose} disabled={isLoading} className="ink-btn ink-btn-ghost text-[color:var(--ink-fg-muted)]" > {cancelText} </button> <button onClick={handleConfirm} disabled={!isConfirmEnabled || isLoading} className={` px-4 py-2 text-white rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${config.buttonColor} `} > {isLoading ? ( <div className="flex items-center gap-2"> <RefreshCw className="w-4 h-4 animate-spin" /> <span>Processing...</span> </div> ) : ( confirmText )} </button> </div> </div> </div> </div> ); }; // ========================================== // SPECIALIZED CONFIRMATION DIALOGS // ========================================== // Delete confirmation dialog export const DeleteConfirmationDialog: React.FC<{ isOpen: boolean; onClose: () => void; onConfirm: () => void; itemType: string; itemName?: string; isLoading?: boolean; requiresTyping?: boolean; }> = ({ isOpen, _onClose, _onConfirm, _itemType, _itemName, _isLoading = false, _requiresTyping = false,  }) => ( <ConfirmationDialog isOpen={isOpen} onClose={onClose} onConfirm={onConfirm} title={`Delete ${itemType}`} message={`Are you sure you want to delete ${itemName ? `"${itemName}"` : `this ${itemType.toLowerCase()}`}? This action cannot be undone.`} confirmText="Delete" cancelText="Cancel" variant="danger" icon={Trash2} requiresTyping={requiresTyping ? 'DELETE' : undefined} isLoading={isLoading} details={[ `The ${itemType.toLowerCase()} will be permanently removed`, 'All associated data will be lost', 'This action cannot be undone', ]} /> ); // Save confirmation dialog (for unsaved changes) export const SaveConfirmationDialog: React.FC<{ isOpen: boolean; onClose: () => void; onSave: () => void; onDiscard: () => void; isLoading?: boolean; }> = ({ isOpen, _onClose, _onSave, _onDiscard, _isLoading = false }) => { if (!isOpen) return null; return ( <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"> <div className="bg-white rounded-lg shadow-xl max-w-md w-full"> <div className="p-6"> <div className="flex items-center gap-3 mb-4"> <div className="p-2 rounded-lg bg-amber-50"> <Save className="w-6 h-6 text-amber-600" /> </div> <h3 className="text-lg font-semibold text-slate-900"> Unsaved Changes </h3> </div> <p className="text-slate-600 mb-6"> You have unsaved changes. What would you like to do? </p> <div className="flex gap-3 justify-end"> <button onClick={onDiscard} disabled={isLoading} className="px-4 py-2 text-slate-700 bg-slate-100 rounded-lg hover:bg-slate-200 transition-colors disabled:opacity-50" > Discard Changes </button> <button onClick={onClose} disabled={isLoading} className="px-4 py-2 text-slate-700 border border-slate-300 rounded-lg hover:bg-slate-50 transition-colors disabled:opacity-50" > Cancel </button> <button onClick={onSave} disabled={isLoading} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50" > {isLoading ? ( <div className="flex items-center gap-2"> <RefreshCw className="w-4 h-4 animate-spin" /> <span>Saving...</span> </div> ) : ( 'Save Changes' )} </button> </div> </div> </div> </div> ); }; // Export confirmation dialog export const ExportConfirmationDialog: React.FC<{ isOpen: boolean; onClose: () => void; onConfirm: () => void; exportType: string; fileName?: string; isLoading?: boolean; }> = ({ isOpen, _onClose, _onConfirm, _exportType, _fileName, _isLoading = false }) => ( <ConfirmationDialog isOpen={isOpen} onClose={onClose} onConfirm={onConfirm} title={`Export as ${exportType.toUpperCase()}`} message={`Export your project${fileName ? ` as "${fileName}"` : ''} in ${exportType.toUpperCase()} format?`} confirmText="Export" cancelText="Cancel" variant="info" icon={Download} isLoading={isLoading} details={[ `Export format: ${exportType.toUpperCase()}`, 'Include all chapters and content', 'Professional formatting applied', ]} /> ); // Archive confirmation dialog export const ArchiveConfirmationDialog: React.FC<{ isOpen: boolean; onClose: () => void; onConfirm: () => void; itemType: string; itemName?: string; isLoading?: boolean; }> = ({ isOpen, _onClose, _onConfirm, _itemType, _itemName, _isLoading = false }) => ( <ConfirmationDialog isOpen={isOpen} onClose={onClose} onConfirm={onConfirm} title={`Archive ${itemType}`} message={`Archive ${itemName ? `"${itemName}"` : `this ${itemType.toLowerCase()}`}? It will be moved to your archived items and hidden from the main view.`} confirmText="Archive" cancelText="Cancel" variant="warning" icon={Archive} isLoading={isLoading} details={[ `The ${itemType.toLowerCase()} will be archived`, 'You can restore it later from archived items', 'It will be hidden from the main view', ]} /> ); // ========================================== // CONFIRMATION HOOK // ========================================== interface UseConfirmationReturn { isOpen: boolean; open: (_config?: Partial<ConfirmationConfig>) => void; close: () => void; config: ConfirmationConfig; } interface ConfirmationConfig { title: string; message: string; confirmText: string; cancelText: string; variant: 'danger' | 'warning' | 'info' | 'success'; onConfirm: () => void; requiresTyping?: string; details?: string[]; } export const useConfirmation = ( defaultConfig: Partial<ConfirmationConfig> = {}, ): UseConfirmationReturn => { const [isOpen, setIsOpen] = useState(false); const [config, setConfig] = useState<ConfirmationConfig>({ title: 'Confirm Action', _message: 'Are you sure you want to continue?', _confirmText: 'Confirm', _cancelText: 'Cancel', _variant: 'info', _onConfirm: () => {}, ...defaultConfig, }); const open = (_newConfig: Partial<ConfirmationConfig> = {}) => { setConfig((prev) => ({ ...prev, ...newConfig })); setIsOpen(true); }; const close = () => { setIsOpen(false); }; return { isOpen, open, close, config, }; };
