// src/components/Writing/EnhancedWritingPanel.tsx import { FileText, Clock, Save, Maximize2, Minimize2, ArrowLeft, Zap, Eye, EyeOff, Type, } from 'lucide-react'; import React, { useState, useEffect, useRef, useCallback } from 'react'; import { useAppContext, View } from '@/context/AppContext'; interface EnhancedWritingPanelProps { className?: string; } const EnhancedWritingPanel: React.FC<EnhancedWritingPanelProps> = ({ className }) => { const { state: _state, currentProject, updateProject, dispatch } = useAppContext(); const [content, setContent] = useState(''); const [isSaving, setIsSaving] = useState(false); const [lastSaved, setLastSaved] = useState<number | null>(null); const [wordCount, setWordCount] = useState(0); const [isFullscreen, setIsFullscreen] = useState(false); const [showStats, setShowStats] = useState(true); const [focusMode, setFocusMode] = useState(false); const textareaRef = useRef<HTMLTextAreaElement>(null); const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null); // Load content when project changes useEffect(() => { if (currentProject) { setContent(currentProject.content || ''); } }, [currentProject]); // Calculate word count useEffect(() => { const words = content .trim() .split(/\s+/) .filter((word) => word.length > 0); setWordCount(words.length); }, [content]); // Auto-save functionality const saveContent = useCallback(async () => { if (!currentProject || content === (currentProject.content || '')) return; setIsSaving(true); try { const updatedProject = { ...currentProject, content, updatedAt: Date.now(), }; updateProject(updatedProject); setLastSaved(Date.now()); } finally { setIsSaving(false); } }, [currentProject, content, updateProject]); // Auto-save with debouncing useEffect(() => { if (saveTimeoutRef.current) { clearTimeout(saveTimeoutRef.current); } saveTimeoutRef.current = setTimeout(() => { saveContent(); }, 1000); // Save after 1 second of inactivity return () => { if (saveTimeoutRef.current) { clearTimeout(saveTimeoutRef.current); } }; }, [content, saveContent]); // Manual save const handleManualSave = () => { if (saveTimeoutRef.current) { clearTimeout(saveTimeoutRef.current); } saveContent(); }; const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => { setContent(e.target.value); }; const formatLastSaved = () => { if (!lastSaved) return ''; const now = Date.now(); const diff = now - lastSaved; if (diff < 60000) return 'Just now'; if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`; return `${Math.floor(diff / 3600000)}h ago`; }; const getReadingTime = () => { const wordsPerMinute = 200; return Math.ceil(wordCount / wordsPerMinute); }; const getCharCount = () => { return content.length; }; const toggleFullscreen = () => { setIsFullscreen(!isFullscreen); }; const toggleFocusMode = () => { setFocusMode(!focusMode); setShowStats(!focusMode ? false : true); }; const goToDashboard = () => { dispatch({ type: 'SET_VIEW', payload: View.Dashboard }); }; // If no project is selected if (!currentProject) { return ( <div className="enhanced-writing-panel"> <div className="max-w-2xl mx-auto text-center py-16"> <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6"> <FileText className="w-8 h-8 text-slate-400" /> </div> <h2 className="text-heading-lg text-slate-900 mb-4"> No Project Selected </h2> <p className="text-body-base text-slate-600 mb-6"> Select a project from the dashboard to start writing, or create a new project to begin your next story. </p> <button onClick={goToDashboard} className="btn btn-primary"> <ArrowLeft className="w-4 h-4" /> Go to Dashboard </button> </div> </div> ); } return ( <div className={`enhanced-writing-panel ${isFullscreen ? 'fullscreen' : ''} ${focusMode ? 'focus-mode' : ''} ${className || ''}`} > {/* Header */} {!focusMode && ( <div className="writing-header sticky top-0 z-20 bg-white/90 backdrop-blur-sm border-b border-slate-200"> <div className="flex items-center justify-between p-4"> <div className="flex items-center gap-4"> <button onClick={goToDashboard} className="btn btn-ghost btn-sm" title="Back to Dashboard" > <ArrowLeft className="w-4 h-4" /> </button> <div> <h1 className="text-heading-md text-slate-900"> {currentProject.name} </h1> <p className="text-caption text-slate-500">{currentProject.description}</p> </div> </div> <div className="flex items-center gap-2"> {/* Save Status */} <div className="flex items-center gap-2 text-caption text-slate-500"> {isSaving ? ( <> <div className="loading w-3 h-3" /> Saving... </> ) : lastSaved ? ( <> <div className="w-2 h-2 bg-green-500 rounded-full" /> Saved {formatLastSaved()} </> ) : ( <> <div className="w-2 h-2 bg-slate-300 rounded-full" /> No changes </> )} </div> {/* Actions */} <button onClick={handleManualSave} className="btn btn-ghost btn-sm" title="Save now" disabled={isSaving} > <Save className="w-4 h-4" /> </button> <button onClick={() => setShowStats(!showStats)} className="btn btn-ghost btn-sm" title={showStats ? 'Hide stats' : 'Show stats'} > {showStats ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />} </button> <button onClick={toggleFocusMode} className="btn btn-ghost btn-sm" title="Toggle focus mode" > <Zap className="w-4 h-4" /> </button> <button onClick={toggleFullscreen} className="btn btn-ghost btn-sm" title={isFullscreen ? 'Exit fullscreen' : 'Enter fullscreen'} > {isFullscreen ? ( <Minimize2 className="w-4 h-4" /> ) : ( <Maximize2 className="w-4 h-4" /> )} </button> </div> </div> </div> )} {/* Stats Bar */} {showStats && !focusMode && ( <div className="stats-bar bg-slate-50 border-b border-slate-200 px-4 py-3"> <div className="flex items-center justify-between"> <div className="flex items-center gap-6"> <div className="flex items-center gap-2"> <Type className="w-4 h-4 text-slate-500" /> <span className="text-body-sm font-medium text-slate-900"> {wordCount.toLocaleString()} </span> <span className="text-caption text-slate-500">words</span> </div> <div className="flex items-center gap-2"> <FileText className="w-4 h-4 text-slate-500" /> <span className="text-body-sm font-medium text-slate-900"> {getCharCount().toLocaleString()} </span> <span className="text-caption text-slate-500">characters</span> </div> <div className="flex items-center gap-2"> <Clock className="w-4 h-4 text-slate-500" /> <span className="text-body-sm font-medium text-slate-900"> {getReadingTime()} </span> <span className="text-caption text-slate-500">min read</span> </div> </div> {/* Daily Goal Progress */} <div className="flex items-center gap-3"> <div className="text-right"> <div className="text-caption text-slate-500">Daily Goal</div> <div className="text-body-sm font-medium text-slate-900"> {wordCount} / 1,000 </div> </div> <div className="w-24 h-2 bg-slate-200 rounded-full overflow-hidden"> <div className="h-full bg-primary-500 transition-all duration-300" style={{ width: `${Math.min((wordCount / 1000) * 100, 100)}%` }} /> </div> </div> </div> </div> )} {/* Writing Area */} <div className={`writing-area flex-1 ${focusMode ? 'p-8 max-w-4xl mx-auto' : 'p-6'}`}> <div className="relative"> <textarea ref={textareaRef} value={content} onChange={handleContentChange} placeholder={ focusMode ? 'Begin your story...' : `Start writing "${currentProject.name}"...\n\nTip: Press Ctrl+S to save manually, or just keep writing - we'll save automatically.` } className={` writing-editor w-full resize-none border-none outline-none ${ focusMode ? 'text-lg leading-relaxed min-h-[600px] bg-transparent' : 'text-base leading-normal min-h-[500px] bg-white' } text-slate-900 placeholder:text-slate-400 ${focusMode ? '' : 'rounded-lg border border-slate-200 p-6'} transition-all duration-200 focus:ring-0 focus:border-primary-300 `} autoFocus /> {/* Focus Mode Overlay Stats */} {focusMode && showStats && ( <div className="absolute bottom-4 right-4 bg-slate-900/80 text-white px-3 py-2 rounded-lg backdrop-blur-sm"> <div className="flex items-center gap-4 text-sm"> <span>{wordCount} words</span> <span>â€¢</span> <span>{getReadingTime()}m read</span> </div> </div> )} </div> </div> {/* Focus Mode Toggle */} {focusMode && ( <div className="fixed bottom-6 left-6 z-30"> <button onClick={toggleFocusMode} className="btn btn-secondary shadow-lg" title="Exit focus mode" > <ArrowLeft className="w-4 h-4" /> Exit Focus </button> </div> )} </div> ); }; export default EnhancedWritingPanel; 