// src/components/Planning/CharacterGoalTracker.tsx - Define and track character development goals across the story import { Target, Flag, CheckCircle2, Circle, AlertCircle, Calendar, Plus, Trash2, TrendingUp, Clock, } from 'lucide-react'; import React, { useMemo, useState } from 'react'; import type { GeneratedCharacter } from '../../services/storyArchitectService'; export interface CharacterGoal { id: string; title: string; description?: string; owner: string; // character name type: 'internal' | 'external' | 'relationship' | 'skill'; priority: 'low' | 'medium' | 'high' | 'critical'; targetChapter?: number; status: 'not_started' | 'in_progress' | 'at_risk' | 'completed' | 'deferred'; milestones: { id: string; title: string; chapter?: number; done: boolean; }[]; } interface CharacterGoalTrackerProps { characters: GeneratedCharacter[]; totalChapters: number; goals?: CharacterGoal[]; onGoalsChange?: (goals: CharacterGoal[]) => void; className?: string; } export default function CharacterGoalTracker({ characters = [], totalChapters = 20, goals = [], onGoalsChange, className = '', }: CharacterGoalTrackerProps) { const [filterCharacter, setFilterCharacter] = useState<string>('all'); const [filterStatus, setFilterStatus] = useState<string>('all'); const [showNewGoal, setShowNewGoal] = useState(false); const filteredGoals = useMemo(() => { return goals.filter((g) => { const charOk = filterCharacter === 'all' || g.owner === filterCharacter; const statusOk = filterStatus === 'all' || g.status === filterStatus; return charOk && statusOk; }); }, [goals, filterCharacter, filterStatus]); const goalStats = useMemo(() => { const byStatus: Record<string, number> = { not_started: 0, in_progress: 0, at_risk: 0, completed: 0, deferred: 0, }; goals.forEach((g) => (byStatus[g.status] = (byStatus[g.status] || 0) + 1)); const completion = goals.length ? Math.round(((byStatus.completed || 0) / goals.length) * 100) : 0; return { byStatus, completion }; }, [goals]); const _addGoal = () => { const owner = filterCharacter === 'all' ? characters[0]?.name || '' : filterCharacter; const newGoal: CharacterGoal = { id: `goal-${Date.now()}`, title: 'New Goal', owner, type: 'internal', priority: 'medium', status: 'not_started', milestones: [], }; onGoalsChange?.([newGoal, ...goals]); setShowNewGoal(false); }; const removeGoal = (id: string) => { onGoalsChange?.(goals.filter((g) => g.id !== id)); }; const updateGoal = (id: string, patch: Partial<CharacterGoal>) => { onGoalsChange?.(goals.map((g) => (g.id === id ? { ...g, ...patch } : g))); }; const addMilestone = (goal: CharacterGoal) => { const ms = { id: `ms-${Date.now()}`, title: 'New milestone', done: false }; updateGoal(goal.id, { milestones: [ms, ...goal.milestones] }); }; const updateMilestone = ( goal: CharacterGoal, msId: string, patch: Partial<CharacterGoal['milestones'][number]>, ) => { updateGoal(goal.id, { milestones: goal.milestones.map((m) => (m.id === msId ? { ...m, ...patch } : m)), }); }; const removeMilestone = (goal: CharacterGoal, msId: string) => { updateGoal(goal.id, { milestones: goal.milestones.filter((m) => m.id !== msId) }); }; const getStatusBadge = (status: CharacterGoal['status']) => { const map: Record<CharacterGoal['status'], string> = { not_started: 'bg-gray-100 text-gray-700', in_progress: 'bg-blue-100 text-blue-700', at_risk: 'bg-amber-100 text-amber-700', completed: 'bg-green-100 text-green-700', deferred: 'bg-purple-100 text-purple-700', }; return map[status]; }; const getPriorityBadge = (p: CharacterGoal['priority']) => { const map: Record<CharacterGoal['priority'], string> = { low: 'border-gray-300 text-gray-600', medium: 'border-blue-300 text-blue-600', high: 'border-amber-300 text-amber-600', critical: 'border-red-300 text-red-600', }; return map[p]; }; const suggestedGoals = useMemo(() => { // Suggest goals from character data return characters.flatMap((char) => { const suggestions: CharacterGoal[] = []; if (char.internalConflict) { suggestions.push({ id: `sugg-${char.name}-internal`, title: `Resolve internal conflict: ${char.internalConflict}`, owner: char.name, type: 'internal', priority: 'high', status: 'not_started', targetChapter: Math.ceil(totalChapters * 0.75), milestones: [], }); } if (char.externalConflict) { suggestions.push({ id: `sugg-${char.name}-external`, title: `Overcome: ${char.externalConflict}`, owner: char.name, type: 'external', priority: 'critical', status: 'not_started', targetChapter: totalChapters, milestones: [], }); } if (char.relationships?.length) { suggestions.push({ id: `sugg-${char.name}-relationship`, title: `Define relationship turning point`, owner: char.name, type: 'relationship', priority: 'medium', status: 'not_started', targetChapter: Math.ceil(totalChapters / 2), milestones: [], }); } return suggestions; }); }, [characters, totalChapters]); return ( <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`} > {/* Header */} <div className="p-4 border-b border-gray-200"> <div className="flex items-center justify-between"> <div> <h2 className="text-lg font-semibold text-gray-900"> Character Development Goals </h2> <p className="text-sm text-gray-600"> Define objectives and track progress through chapters </p> </div> <div className="text-sm text-gray-500"> {goals.length} goals â€¢ {goalStats.completion}% complete </div> </div> </div> {/* Filters and actions */} <div className="p-4 border-b border-gray-200 bg-gray-50"> <div className="flex flex-wrap items-center gap-3"> <div className="flex items-center gap-2"> <Target className="w-4 h-4 text-gray-500" /> <select value={filterCharacter} onChange={(e) => setFilterCharacter(e.target.value)} className="bg-white border border-gray-300 rounded px-3 py-1 text-sm" > <option value="all">All Characters</option> {characters.map((c) => ( <option key={c.name} value={c.name}> {c.name} </option> ))} </select> </div> <div className="flex items-center gap-2"> <Flag className="w-4 h-4 text-gray-500" /> <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="bg-white border border-gray-300 rounded px-3 py-1 text-sm" > <option value="all">All Statuses</option> <option value="not_started">Not Started</option> <option value="in_progress">In Progress</option> <option value="at_risk">At Risk</option> <option value="completed">Completed</option> <option value="deferred">Deferred</option> </select> </div> <button onClick={() => setShowNewGoal(true)} className="ml-auto px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-2" > <Plus className="w-4 h-4" /> New Goal </button> </div> </div> {/* Goals list */} <div className="p-6 space-y-3"> {filteredGoals.length === 0 ? ( <div className="text-center text-gray-500 py-8"> <AlertCircle className="w-10 h-10 mx-auto mb-2 opacity-60" /> <p>No goals yet. Use "New Goal" or add a suggested goal below.</p> </div> ) : ( filteredGoals.map((goal) => ( <div key={goal.id} className="p-4 border border-gray-200 rounded-lg" > <div className="flex items-start justify-between"> <div className="flex-1"> <div className="flex items-center gap-2 mb-1"> <h3 className="font-medium text-gray-900">{goal.title}</h3> <span className={`px-2 py-0.5 rounded-full text-xs border ${getPriorityBadge(goal.priority)}`} > {goal.priority} </span> <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(goal.status)}`} > {goal.status.replace('_', ' ')} </span> </div> {goal.description && ( <p className="text-sm text-gray-600 mb-2"> {goal.description} </p> )} <div className="flex items-center gap-4 text-xs text-gray-500"> <div className="flex items-center gap-1"> <Target className="w-3 h-3" /> {goal.owner} </div> {goal.targetChapter && ( <div className="flex items-center gap-1"> <Calendar className="w-3 h-3" /> Target: Ch {goal.targetChapter} </div> )} <div className="flex items-center gap-1"> <TrendingUp className="w-3 h-3" /> {goal.milestones.filter((m) => m.done).length}/{goal.milestones.length}{' '} milestones </div> </div> </div> <div className="flex items-center gap-2"> <button onClick={() => updateGoal(goal.id, { status: goal.status === 'completed' ? 'in_progress' : 'completed', }) } className="p-2 text-gray-500 hover:text-gray-700" title={goal.status === 'completed' ? 'Mark In Progress' : 'Mark Complete'} > {goal.status === 'completed' ? ( <Circle className="w-4 h-4" /> ) : ( <CheckCircle2 className="w-4 h-4" /> )} </button> <button onClick={() => removeGoal(goal.id)} className="p-2 text-gray-500 hover:text-red-600" title="Delete Goal" > <Trash2 className="w-4 h-4" /> </button> </div> </div> {/* Milestones */} <div className="mt-3 pt-3 border-t border-gray-200"> <div className="flex items-center justify-between mb-2"> <h4 className="text-sm font-medium text-gray-700"> Milestones </h4> <button onClick={() => addMilestone(goal)} className="text-xs px-2 py-1 border border-gray-300 rounded hover:bg-gray-50" > Add milestone </button> </div> {goal.milestones.length === 0 ? ( <p className="text-xs text-gray-500">No milestones yet.</p> ) : ( <div className="space-y-2"> {goal.milestones.map((m) => ( <div key={m.id} className="flex items-center justify-between p-2 bg-gray-50 rounded" > <div className="flex items-center gap-2"> <button onClick={() => updateMilestone(goal, m.id, { done: !m.done })} className="p-1 text-gray-500 hover:text-gray-700" > {m.done ? ( <CheckCircle2 className="w-4 h-4 text-green-600" /> ) : ( <Circle className="w-4 h-4" /> )} </button> <input className="bg-transparent text-sm text-gray-800 focus:outline-none" value={m.title} onChange={(e) => updateMilestone(goal, m.id, { title: e.target.value })} /> </div> <div className="flex items-center gap-2 text-xs text-gray-500"> <Clock className="w-3 h-3" /> <select value={m.chapter || ''} onChange={(e) => updateMilestone(goal, m.id, { chapter: e.target.value ? Number(e.target.value) : undefined, }) } className="bg-white border border-gray-300 rounded px-2 py-0.5" > <option value="">Chapter</option> {Array.from({ length: totalChapters }, (_, i) => ( <option key={i + 1} value={i + 1}> Ch {i + 1} </option> ))} </select> <button onClick={() => removeMilestone(goal, m.id)} className="p-1 text-gray-500 hover:text-red-600" > <Trash2 className="w-4 h-4" /> </button> </div> </div> ))} </div> )} </div> </div> )) )} </div> {/* Suggested goals */} <div className="p-6 border-t border-gray-200 bg-gray-50"> <h3 className="font-medium text-gray-900 mb-3">Suggested Goals</h3> {suggestedGoals.length === 0 ? ( <p className="text-sm text-gray-600">No suggestions available.</p> ) : ( <div className="grid grid-cols-1 md:grid-cols-2 gap-3"> {suggestedGoals.slice(0, 6).map((sg) => ( <div key={sg.id} className="p-3 border border-gray-200 rounded-lg bg-white" > <div className="flex items-start justify-between"> <div> <div className="flex items-center gap-2 mb-1"> <h4 className="text-sm font-medium text-gray-900"> {sg.title} </h4> <span className={`px-2 py-0.5 rounded-full text-xs border ${getPriorityBadge(sg.priority)}`} > {sg.priority} </span> </div> <div className="text-xs text-gray-500"> {sg.owner} â€¢ target Ch {sg.targetChapter} </div> </div> <button onClick={() => onGoalsChange?.([sg, ...goals])} className="text-xs px-2 py-1 bg-blue-600 text-white rounded hover:bg-blue-700" > Add </button> </div> </div> ))} </div> )} </div> {/* New goal inline form */} {showNewGoal && ( <div className="p-6 border-t border-gray-200"> <div className="p-4 border border-gray-200 rounded-lg"> <h3 className="font-medium text-gray-900 mb-3">Create Goal</h3> <NewGoalForm characters={characters} totalChapters={totalChapters} onCancel={() => setShowNewGoal(false)} onCreate={(goal) => { onGoalsChange?.([goal, ...goals]); setShowNewGoal(false); }} /> </div> </div> )} </div> ); } function NewGoalForm({ characters, totalChapters, onCreate, onCancel, }: { characters: GeneratedCharacter[]; totalChapters: number; onCreate: (goal: CharacterGoal) => void; onCancel: () => void; }) { const [title, setTitle] = useState(''); const [owner, setOwner] = useState(characters[0]?.name || ''); const [type, setType] = useState<CharacterGoal['type']>('internal'); const [priority, setPriority] = useState<CharacterGoal['priority']>('medium'); const [status, setStatus] = useState<CharacterGoal['status']>('not_started'); const [targetChapter, setTargetChapter] = useState<number | undefined>(undefined); const [description, setDescription] = useState(''); const create = () => { if (!title || !owner) return; onCreate({ id: `goal-${Date.now()}`, title, description, owner, type, priority, status, targetChapter, milestones: [], }); }; return ( <div className="space-y-3"> <div className="grid grid-cols-1 md:grid-cols-2 gap-3"> <div> <label className="block text-xs text-gray-500 mb-1">Title</label> <input className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={title} onChange={(e) => setTitle(e.target.value)} placeholder="e.g., Confront past trauma" /> </div> <div> <label className="block text-xs text-gray-500 mb-1">Owner</label> <select className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={owner} onChange={(e) => setOwner(e.target.value)} > {characters.map((c) => ( <option key={c.name} value={c.name}> {c.name} </option> ))} </select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-3"> <div> <label className="block text-xs text-gray-500 mb-1">Type</label> <select className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={type} onChange={(e) => setType(e.target.value as any)} > <option value="internal">Internal</option> <option value="external">External</option> <option value="relationship">Relationship</option> <option value="skill">Skill</option> </select> </div> <div> <label className="block text-xs text-gray-500 mb-1">Priority</label> <select className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={priority} onChange={(e) => setPriority(e.target.value as any)} > <option value="low">Low</option> <option value="medium">Medium</option> <option value="high">High</option> <option value="critical">Critical</option> </select> </div> <div> <label className="block text-xs text-gray-500 mb-1">Status</label> <select className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={status} onChange={(e) => setStatus(e.target.value as any)} > <option value="not_started">Not Started</option> <option value="in_progress">In Progress</option> <option value="at_risk">At Risk</option> <option value="completed">Completed</option> <option value="deferred">Deferred</option> </select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-3"> <div> <label className="block text-xs text-gray-500 mb-1">Target Chapter (optional)</label> <select className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={targetChapter || ''} onChange={(e) => setTargetChapter(e.target.value ? Number(e.target.value) : undefined)} > <option value="">None</option> {Array.from({ length: totalChapters }, (_, i) => ( <option key={i + 1} value={i + 1}> Chapter {i + 1} </option> ))} </select> </div> <div> <label className="block text-xs text-gray-500 mb-1">Description (optional)</label> <textarea className="w-full border border-gray-300 rounded px-3 py-2 bg-white text-sm" value={description} onChange={(e) => setDescription(e.target.value)} rows={2} placeholder="What does success look like?" /> </div> </div> <div className="flex items-center justify-end gap-2"> <button onClick={onCancel} className="px-3 py-1 text-sm border border-gray-300 rounded" > Cancel </button> <button onClick={create} className="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700" > Create Goal </button> </div> </div> ); } 