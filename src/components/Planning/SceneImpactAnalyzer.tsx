// src/components/Planning/SceneImpactAnalyzer.tsx - Analyze how scenes impact multiple characters simultaneously import { Film, Heart, Zap, ArrowUpCircle, ArrowDownCircle, Circle, Star, Target, Eye, } from 'lucide-react'; import React, { useState, useMemo } from 'react'; import type { GeneratedCharacter } from '../../services/storyArchitectService'; interface SceneImpact { character: string; role: 'protagonist' | 'antagonist' | 'supporting' | 'minor'; presence: 'active' | 'mentioned' | 'affected' | 'absent'; growthType: 'major' | 'minor' | 'setback' | 'none'; emotionalChange: 'positive' | 'negative' | 'neutral' | 'mixed'; relationshipChanges: { withCharacter: string; changeType: 'strengthened' | 'strained' | 'established' | 'broken' | 'unchanged'; intensity: 'subtle' | 'moderate' | 'significant'; }[]; arcProgression: { beforeStage?: string; afterStage?: string; progressMade: boolean; }; voiceEvolution: { changed: boolean; aspect: 'vocabulary' | 'tone' | 'confidence' | 'emotional_expression' | null; direction: 'stronger' | 'weaker' | 'different'; }; } interface SceneAnalysis { chapterNumber: number; sceneTitle: string; sceneType: 'action' | 'dialogue' | 'introspection' | 'revelation' | 'conflict' | 'resolution'; primaryPOV: string | null; charactersPresent: string[]; totalGrowthMoments: number; relationshipDynamics: number; emotionalIntensity: number; impacts: SceneImpact[]; keyMoments: string[]; overallSignificance: 'critical' | 'important' | 'moderate' | 'minor'; } interface SceneImpactAnalyzerProps { characters: GeneratedCharacter[]; totalChapters: number; onSceneUpdate?: (chapterNumber: number, impacts: SceneImpact[]) => void; className?: string; } export default function SceneImpactAnalyzer({ characters = [], totalChapters = 20, onSceneUpdate: _onSceneUpdate, className = '', }: SceneImpactAnalyzerProps) { const [selectedChapter, setSelectedChapter] = useState(1); const [_viewMode, _setViewMode] = useState<'grid' | 'timeline' | 'heatmap'>('grid'); const [filterSignificance, setFilterSignificance] = useState<string>('all'); // Generate comprehensive scene analysis based on character data const sceneAnalyses = useMemo(() => { const scenes: SceneAnalysis[] = []; for (let chapter = 1; chapter <= totalChapters; chapter++) { // Determine which characters have significant moments in this chapter const charactersWithMoments = characters.filter((char) => { const hasArcStage = char.arcStages?.some((stage) => stage.chapter === chapter); const hasPOVChapter = char.povChapters?.includes(chapter); const hasGrowthMoment = char.growthMoments?.some((moment, index) => { // Distribute growth moments across chapters const estimatedChapter = Math.floor((index / char.growthMoments!.length) * totalChapters) + 1; return Math.abs(estimatedChapter - chapter) <= 1; }); return hasArcStage || hasPOVChapter || hasGrowthMoment; }); // Determine primary POV character for this chapter const povCharacter = characters.find((char) => char.povChapters?.includes(chapter)); // Generate scene impacts for each character const impacts: SceneImpact[] = characters.map((character) => { const arcStage = character.arcStages?.find((stage) => stage.chapter === chapter); const isPOVCharacter = povCharacter?.name === character.name; const isPresent = charactersWithMoments.includes(character) || isPOVCharacter; // Determine character presence let presence: SceneImpact['presence'] = 'absent'; if (isPOVCharacter || arcStage) presence = 'active'; else if (isPresent) presence = 'mentioned'; else if (Math.random() > 0.7) presence = 'affected'; // Some characters affected indirectly // Determine growth type let growthType: SceneImpact['growthType'] = 'none'; if (arcStage) { if (['climax', 'resolution', 'transformation'].includes(arcStage.stage)) { growthType = 'major'; } else if (['setback', 'regression'].includes(arcStage.stage)) { growthType = 'setback'; } else { growthType = 'minor'; } } // Determine emotional change let emotionalChange: SceneImpact['emotionalChange'] = 'neutral'; if (arcStage) { const emotionalStates = ['desperate', 'broken', 'disappointed']; const positiveStates = ['confident', 'triumphant', 'mature', 'wise']; if (emotionalStates.includes(arcStage.internalState)) { emotionalChange = 'negative'; } else if (positiveStates.includes(arcStage.internalState)) { emotionalChange = 'positive'; } else { emotionalChange = 'mixed'; } } // Generate relationship changes const relationshipChanges = character.relationships?.map((rel) => { const otherCharacter = characters.find((c) => c.name === rel.withCharacter); const otherHasMoment = otherCharacter?.arcStages?.some( (stage) => stage.chapter === chapter, ); let changeType: SceneImpact['relationshipChanges'][0]['changeType'] = 'unchanged'; let intensity: SceneImpact['relationshipChanges'][0]['intensity'] = 'subtle'; if (arcStage || otherHasMoment) { // Determine relationship change based on character states and relationship type if (rel.type === 'enemy' && growthType === 'major') { changeType = Math.random() > 0.5 ? 'strained' : 'broken'; intensity = 'significant'; } else if (rel.type === 'ally' && growthType !== 'none') { changeType = 'strengthened'; intensity = growthType === 'major' ? 'significant' : 'moderate'; } else if (rel.type === 'love_interest') { changeType = emotionalChange === 'positive' ? 'strengthened' : 'strained'; intensity = 'moderate'; } } return { withCharacter: rel.withCharacter, changeType, intensity, }; }) || []; // Arc progression analysis const arcProgression = { beforeStage: arcStage ? arcStage.stage : undefined, afterStage: arcStage ? arcStage.stage : undefined, progressMade: !!arcStage, }; // Voice evolution const voiceEvolution = { changed: arcStage?.growth === 'transformation' || growthType === 'major', aspect: arcStage ? (['vocabulary', 'tone', 'confidence', 'emotional_expression'] as const)[ Math.floor(Math.random() * 4) ] : null, direction: emotionalChange === 'positive' ? 'stronger' : emotionalChange === 'negative' ? 'weaker' : 'different', } as SceneImpact['voiceEvolution']; return { character: character.name, role: character.role, presence, growthType, emotionalChange, relationshipChanges, arcProgression, voiceEvolution, }; }); // Calculate scene metrics const totalGrowthMoments = impacts.filter((impact) => impact.growthType !== 'none').length; const relationshipDynamics = impacts.reduce( (sum, impact) => sum + impact.relationshipChanges.filter((rel) => rel.changeType !== 'unchanged').length, 0, ); const emotionalIntensity = impacts.filter( (impact) => impact.emotionalChange !== 'neutral', ).length; // Determine scene type and significance let sceneType: SceneAnalysis['sceneType'] = 'dialogue'; let overallSignificance: SceneAnalysis['overallSignificance'] = 'minor'; if (totalGrowthMoments >= 3) { sceneType = 'conflict'; overallSignificance = 'critical'; } else if (relationshipDynamics >= 2) { sceneType = 'revelation'; overallSignificance = 'important'; } else if (emotionalIntensity >= 2) { sceneType = 'introspection'; overallSignificance = 'moderate'; } // Generate key moments const keyMoments = impacts .filter((impact) => impact.growthType === 'major' || impact.voiceEvolution.changed) .map((impact) => `${impact.character} experiences ${impact.growthType} development`); scenes.push({ chapterNumber: chapter, sceneTitle: `Chapter ${chapter}`, sceneType, primaryPOV: povCharacter?.name || null, charactersPresent: impacts.filter((i) => i.presence === 'active').map((i) => i.character), totalGrowthMoments, relationshipDynamics, emotionalIntensity, impacts, keyMoments, overallSignificance, }); } return scenes; }, [characters, totalChapters]); // Filter scenes based on significance const _filteredScenes = useMemo(() => { if (filterSignificance === 'all') return sceneAnalyses; return sceneAnalyses.filter((scene) => scene.overallSignificance === filterSignificance); }, [sceneAnalyses, filterSignificance]); const selectedScene = sceneAnalyses.find((scene) => scene.chapterNumber === selectedChapter); const getPresenceIcon = (presence: SceneImpact['presence']) => { switch (presence) { case 'active': return <Star className="w-4 h-4 text-yellow-500" />; case 'mentioned': return <Eye className="w-4 h-4 text-blue-500" />; case 'affected': return <Circle className="w-4 h-4 text-gray-500" />; default: return <Circle className="w-4 h-4 text-gray-300" />; } }; const getGrowthIcon = (growthType: SceneImpact['growthType']) => { switch (growthType) { case 'major': return <ArrowUpCircle className="w-4 h-4 text-green-600" />; case 'minor': return <ArrowUpCircle className="w-4 h-4 text-blue-500" />; case 'setback': return <ArrowDownCircle className="w-4 h-4 text-red-500" />; default: return <Circle className="w-4 h-4 text-gray-300" />; } }; const getEmotionalColor = (change: SceneImpact['emotionalChange']) => { switch (change) { case 'positive': return 'text-green-600'; case 'negative': return 'text-red-600'; case 'mixed': return 'text-purple-600'; default: return 'text-gray-500'; } }; const getSignificanceColor = (significance: SceneAnalysis['overallSignificance']) => { switch (significance) { case 'critical': return 'border-red-400 bg-red-50'; case 'important': return 'border-orange-400 bg-orange-50'; case 'moderate': return 'border-blue-400 bg-blue-50'; default: return 'border-gray-200'; } }; return ( <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`} > {/* Header */} <div className="p-4 border-b border-gray-200"> <div className="flex items-center justify-between"> <div> <h2 className="text-lg font-semibold text-gray-900"> Scene Impact Analysis </h2> <p className="text-sm text-gray-600"> Analyze how each scene affects multiple characters simultaneously </p> </div> <div className="flex items-center gap-2"> <select value={filterSignificance} onChange={(e) => setFilterSignificance(e.target.value)} className="bg-white border border-gray-300 rounded px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="all">All Scenes</option> <option value="critical">Critical Only</option> <option value="important">Important Only</option> <option value="moderate">Moderate Only</option> <option value="minor">Minor Only</option> </select> </div> </div> </div> {/* Chapter Selector */} <div className="p-4 border-b border-gray-200 bg-gray-50"> <div className="flex items-center gap-4"> <Film className="w-5 h-5 text-gray-400" /> <div className="flex items-center gap-2"> <label className="text-sm font-medium text-gray-700">Chapter:</label> <select value={selectedChapter} onChange={(e) => setSelectedChapter(Number(e.target.value))} className="bg-white border border-gray-300 rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" > {Array.from({ length: totalChapters }, (_, i) => ( <option key={i + 1} value={i + 1}> Chapter {i + 1} </option> ))} </select> </div> {selectedScene && ( <div className="flex items-center gap-4 text-sm ml-auto"> <div className="flex items-center gap-2"> <Target className="w-4 h-4" /> <span className="text-gray-600">Growth Moments:</span> <span className="font-medium text-gray-900"> {selectedScene.totalGrowthMoments} </span> </div> <div className="flex items-center gap-2"> <Heart className="w-4 h-4" /> <span className="text-gray-600">Relationship Changes:</span> <span className="font-medium text-gray-900"> {selectedScene.relationshipDynamics} </span> </div> </div> )} </div> </div> {/* Main Content */} {selectedScene ? ( <div className="p-6"> {/* Scene Overview */} <div className="mb-8"> <div className="flex items-center justify-between mb-4"> <h3 className="text-lg font-medium text-gray-900"> {selectedScene.sceneTitle} </h3> <div className={`px-3 py-1 rounded-full text-sm font-medium ${getSignificanceColor(selectedScene.overallSignificance)}`} > {selectedScene.overallSignificance} </div> </div> <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4"> <div className="text-center p-3 bg-gray-50 rounded"> <div className="font-medium text-gray-900"> {selectedScene.sceneType} </div> <div className="text-sm text-gray-600">Scene Type</div> </div> <div className="text-center p-3 bg-gray-50 rounded"> <div className="font-medium text-gray-900"> {selectedScene.primaryPOV || 'Multiple'} </div> <div className="text-sm text-gray-600">Primary POV</div> </div> <div className="text-center p-3 bg-gray-50 rounded"> <div className="font-medium text-gray-900"> {selectedScene.charactersPresent.length} </div> <div className="text-sm text-gray-600">Characters Present</div> </div> <div className="text-center p-3 bg-gray-50 rounded"> <div className="font-medium text-gray-900"> {selectedScene.emotionalIntensity} </div> <div className="text-sm text-gray-600">Emotional Intensity</div> </div> </div> {/* Key Moments */} {selectedScene.keyMoments.length > 0 && ( <div className="mb-6"> <h4 className="font-medium text-gray-900 mb-2">Key Moments</h4> <div className="space-y-1"> {selectedScene.keyMoments.map((moment, index) => ( <div key={index} className="flex items-center gap-2 text-sm"> <Zap className="w-3 h-3 text-yellow-500" /> <span className="text-gray-700">{moment}</span> </div> ))} </div> </div> )} </div> {/* Character Impact Grid */} <div className="space-y-4"> <h3 className="font-medium text-gray-900">Character Impact Analysis</h3> <div className="space-y-3"> {selectedScene.impacts.map((impact) => ( <div key={impact.character} className="p-4 border border-gray-200 rounded-lg" > <div className="flex items-start justify-between mb-3"> <div className="flex items-center gap-3"> <div className="flex items-center gap-2"> {getPresenceIcon(impact.presence)} <h4 className="font-medium text-gray-900"> {impact.character} </h4> </div> <span className={`px-2 py-1 rounded-full text-xs font-medium ${ impact.role === 'protagonist' ? 'bg-blue-100 text-blue-700' : impact.role === 'antagonist' ? 'bg-red-100 text-red-700' : 'bg-gray-100 text-gray-700' }`} > {impact.role} </span> </div> <div className="flex items-center gap-2"> {getGrowthIcon(impact.growthType)} <span className="text-sm text-gray-600 capitalize"> {impact.presence} </span> </div> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm"> {/* Growth & Emotion */} <div> <h5 className="font-medium text-gray-700 mb-1"> Development </h5> <div className="space-y-1"> <div className="flex justify-between"> <span className="text-gray-600">Growth:</span> <span className="capitalize">{impact.growthType}</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Emotion:</span> <span className={getEmotionalColor(impact.emotionalChange)}> {impact.emotionalChange} </span> </div> </div> </div> {/* Arc Progression */} <div> <h5 className="font-medium text-gray-700 mb-1"> Arc Progress </h5> <div className="space-y-1"> <div className="flex justify-between"> <span className="text-gray-600">Stage:</span> <span className="capitalize"> {impact.arcProgression.beforeStage?.replace('_', ' ') || 'None'} </span> </div> <div className="flex justify-between"> <span className="text-gray-600">Progress:</span> <span>{impact.arcProgression.progressMade ? 'Yes' : 'No'}</span> </div> </div> </div> {/* Voice Evolution */} <div> <h5 className="font-medium text-gray-700 mb-1"> Voice Changes </h5> <div className="space-y-1"> <div className="flex justify-between"> <span className="text-gray-600">Changed:</span> <span>{impact.voiceEvolution.changed ? 'Yes' : 'No'}</span> </div> {impact.voiceEvolution.changed && ( <div className="flex justify-between"> <span className="text-gray-600">Aspect:</span> <span className="capitalize"> {impact.voiceEvolution.aspect?.replace('_', ' ')} </span> </div> )} </div> </div> </div> {/* Relationship Changes */} {impact.relationshipChanges.filter((rel) => rel.changeType !== 'unchanged') .length > 0 && ( <div className="mt-3 pt-3 border-t border-gray-200"> <h5 className="font-medium text-gray-700 mb-2"> Relationship Changes </h5> <div className="flex flex-wrap gap-2"> {impact.relationshipChanges .filter((rel) => rel.changeType !== 'unchanged') .map((rel, index) => ( <div key={index} className={`px-2 py-1 rounded text-xs ${ rel.changeType === 'strengthened' ? 'bg-green-100 text-green-700' : rel.changeType === 'strained' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700' }`} > {rel.withCharacter}: {rel.changeType} ({rel.intensity}) </div> ))} </div> </div> )} </div> ))} </div> </div> </div> ) : ( <div className="p-8 text-center text-gray-500"> <Film className="w-12 h-12 mx-auto mb-3 opacity-50" /> <p>Select a chapter to analyze scene impacts</p> </div> )} </div> ); } 