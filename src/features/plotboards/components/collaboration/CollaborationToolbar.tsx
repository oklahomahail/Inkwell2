// Collaboration Toolbar Component for Plot Boards // Provides sharing, permissions, export controls, and collaboration status import React, { useState, useEffect } from 'react'; import { CollaborativeUser, Permission, SharedBoard, ShareType, ConnectionState, ConnectionStatus, } from '../../collaboration/types'; import { plotBoardExportSystem, ExportFormat } from '../../export/exportSystem'; import { plotBoardPortabilitySystem } from '../../portability/portabilitySystem'; import { PlotBoard } from '../../types'; import { UserAvatarGroup } from './UserAvatar'; interface CollaborationToolbarProps { board: PlotBoard; users: CollaborativeUser[]; currentUser: CollaborativeUser; connectionState: ConnectionState; sharedBoard?: SharedBoard; onShare?: () => void; onInviteUsers?: () => void; onManagePermissions?: () => void; onUserClick?: (_user: CollaborativeUser) => void; className?: string; } export const CollaborationToolbar: React.FC<CollaborationToolbarProps> = ({ board, _users, _currentUser, _connectionState, _sharedBoard, _onShare, _onInviteUsers, _onManagePermissions, _onUserClick, _className = '',  }) => { const [showExportMenu, setShowExportMenu] = useState(false); const [isExporting, setIsExporting] = useState(false); const [showSyncStatus, setShowSyncStatus] = useState(false); const activeUsers = users.filter((user) => user.presence?.isOnline); const canInvite = currentUser.permissions.includes(Permission.INVITE_USERS); const canManagePermissions = currentUser.permissions.includes(Permission.MANAGE_PERMISSIONS); const canExport = currentUser.permissions.includes(Permission.EXPORT_DATA); const canShare = currentUser.permissions.includes(Permission.SHARE_VIEW); useEffect(() => { if (connectionState.status !== ConnectionStatus.CONNECTED) { setShowSyncStatus(true); const timer = setTimeout(() => setShowSyncStatus(false), 5000); return () => clearTimeout(timer); } }, [connectionState.status]); const handleExport = async (_format: ExportFormat) => { if (!canExport) return; setIsExporting(true); setShowExportMenu(false); try { const exportResult = await plotBoardExportSystem.exportBoard( board, [], // Views would come from saved views manager [], // Templates would come from template system { format, includeViews: false, includeTemplates: false, includeMetadata: true, includeCards: true, includeSettings: true, }, ); if (exportResult.success) { await plotBoardExportSystem.downloadExport(exportResult); } else { console.error('Export failed:', exportResult.errors); } } catch (error) { console.error('Export error:', error); } finally { setIsExporting(false); } }; const handleCreatePortablePackage = async () => { if (!canExport) return; setIsExporting(true); setShowExportMenu(false); try { const portablePackage = await plotBoardPortabilitySystem.createPortablePackage( [board], [], // Views [], // Templates { description: `Portable package for ${board.title}`, tags: ['export', 'backup'], includeViews: true, includeTemplates: false, includeSettings: true, validate: true, }, ); await plotBoardPortabilitySystem.exportPortablePackage(portablePackage); } catch (error) { console.error('Portable package creation failed:', error); } finally { setIsExporting(false); } }; const getConnectionStatusColor = () => { switch (connectionState.status) { case ConnectionStatus.CONNECTED: return 'text-green-600 bg-green-100'; case ConnectionStatus.CONNECTING: case ConnectionStatus.RECONNECTING: return 'text-yellow-600 bg-yellow-100'; case ConnectionStatus.DISCONNECTED: case ConnectionStatus.ERROR: return 'text-red-600 bg-red-100'; default: return 'text-gray-600 bg-gray-100'; } }; const getConnectionStatusText = () => { switch (connectionState.status) { case ConnectionStatus.CONNECTED: return connectionState.latency ? `Connected (${connectionState.latency}ms)` : 'Connected'; case ConnectionStatus.CONNECTING: return 'Connecting...'; case ConnectionStatus.RECONNECTING: return `Reconnecting... (${connectionState.reconnectAttempts}/${connectionState.maxReconnectAttempts})`; case ConnectionStatus.DISCONNECTED: return 'Offline'; case ConnectionStatus.ERROR: return 'Connection error'; default: return 'Unknown'; } }; return ( <div className={`flex items-center justify-between bg-white border-b border-gray-200 px-4 py-2 ${className}`} > {/* Left side: Board info and collaboration status */} <div className="flex items-center space-x-4"> <div className="flex items-center space-x-2"> <h1 className="text-lg font-semibold text-gray-900">{board.title}</h1> {/* Sharing indicator */} {sharedBoard && ( <div className="flex items-center space-x-1"> <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" /> </svg> <span className="text-xs text-blue-600 font-medium"> {sharedBoard.shareType === ShareType.PUBLIC ? 'Public' : 'Shared'} </span> </div> )} </div> {/* Connection status */} {showSyncStatus && ( <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getConnectionStatusColor()}`} > <div className="w-2 h-2 rounded-full bg-current mr-2 animate-pulse"></div> {getConnectionStatusText()} </div> )} </div> {/* Center: Active collaborators */} <div className="flex-1 flex justify-center"> <UserAvatarGroup users={activeUsers} maxVisible={5} size="sm" showPresence showActivity onUserClick={onUserClick} /> </div> {/* Right side: Actions */} <div className="flex items-center space-x-2"> {/* Export menu */} <div className="relative"> <button className={` inline-flex items-center px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${!canExport ? 'opacity-50 cursor-not-allowed' : ''} ${isExporting ? 'opacity-50 cursor-wait' : ''} `} onClick={() => setShowExportMenu(!showExportMenu)} disabled={!canExport || isExporting} > {isExporting ? ( <> <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" > <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" ></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" ></path> </svg> Exporting... </> ) : ( <> <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /> </svg> Export </> )} <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" /> </svg> </button> {showExportMenu && canExport && !isExporting && ( <div className="absolute right-0 mt-1 w-56 bg-white border border-gray-200 rounded-md shadow-lg z-10"> <div className="py-1"> <div className="px-3 py-2 text-xs font-medium text-gray-500 border-b"> Export Formats </div> <button className="w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100 flex items-center" onClick={() => handleExport(ExportFormat.JSON)} > <svg className="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /> </svg> JSON Data </button> <button className="w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100 flex items-center" onClick={() => handleExport(ExportFormat.MARKDOWN)} > <svg className="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /> </svg> Markdown </button> <button className="w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100 flex items-center" onClick={() => handleExport(ExportFormat.CSV)} > <svg className="w-4 h-4 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" /> </svg> CSV Spreadsheet </button> <button className="w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100 flex items-center" onClick={() => handleExport(ExportFormat.TEMPLATE)} > <svg className="w-4 h-4 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" /> </svg> Reusable Template </button> <div className="border-t border-gray-100 mt-1"> <div className="px-3 py-2 text-xs font-medium text-gray-500"> Backup & Sharing </div> <button className="w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100 flex items-center" onClick={handleCreatePortablePackage} > <svg className="w-4 h-4 mr-2 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" /> </svg> Portable Package </button> </div> </div> </div> )} </div> {/* Share button */} {canShare && onShare && ( <button className="inline-flex items-center px-3 py-1.5 border border-transparent rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" onClick={onShare} > <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" /> </svg> Share </button> )} {/* Invite users button */} {canInvite && onInviteUsers && ( <button className="inline-flex items-center px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" onClick={onInviteUsers} > <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" /> </svg> Invite </button> )} {/* Permissions menu */} {canManagePermissions && onManagePermissions && ( <button className="p-1.5 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded-md" onClick={onManagePermissions} title="Manage permissions" > <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" /> </svg> </button> )} </div> </div> ); }; /* ========= Connection Status Indicator ========= */ interface ConnectionStatusIndicatorProps { connectionState: ConnectionState; className?: string; } export const ConnectionStatusIndicator: React.FC<ConnectionStatusIndicatorProps> = ({ connectionState, _className = '',  }) => { const [isVisible, setIsVisible] = useState(false); useEffect(() => { if (connectionState.status !== ConnectionStatus.CONNECTED) { setIsVisible(true); } else { const timer = setTimeout(() => setIsVisible(false), 2000); return () => clearTimeout(timer); } }, [connectionState.status]); if (!isVisible) return null; const getStatusConfig = () => { switch (connectionState.status) { case ConnectionStatus.CONNECTED: return { color: 'bg-green-500', text: 'Connected', icon: ( <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" /> </svg> ), }; case ConnectionStatus.CONNECTING: case ConnectionStatus.RECONNECTING: return { color: 'bg-yellow-500', text: connectionState.status === ConnectionStatus.RECONNECTING ? 'Reconnecting...' : 'Connecting...', icon: ( <svg className="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" ></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" ></path> </svg> ), }; case ConnectionStatus.DISCONNECTED: case ConnectionStatus.ERROR: return { color: 'bg-red-500', text: 'Offline', icon: ( <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" /> </svg> ), }; default: return { color: 'bg-gray-500', text: 'Unknown', icon: null, }; } }; const config = getStatusConfig(); return ( <div className={`fixed top-4 right-4 z-50 ${className}`}> <div className={` flex items-center space-x-2 px-3 py-2 rounded-lg shadow-lg text-white text-sm font-medium ${config.color} transform transition-all duration-300 ease-in-out `} > {config.icon} <span>{config.text}</span> {connectionState.latency && connectionState.status === ConnectionStatus.CONNECTED && ( <span className="text-xs opacity-75">({connectionState.latency}ms)</span> )} </div> </div> ); };
