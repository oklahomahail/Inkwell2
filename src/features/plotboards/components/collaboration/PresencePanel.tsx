// Presence Panel Component for Plot Boards Collaboration // Shows active collaborators, their activities, and provides collaboration controls import React, { useState } from 'react'; import { CollaborativeUser, UserActivity, ActivityType, Permission, UserRole, } from '../../collaboration/types'; import { UserAvatarGroup, UserStatusBadge } from './UserAvatar'; interface PresencePanelProps { _boardId: string; users: CollaborativeUser[]; currentUser: CollaborativeUser; onUserClick?: (_user: CollaborativeUser) => void; onInviteUser?: () => void; className?: string; } export const PresencePanel: React.FC<PresencePanelProps> = ({ _boardId, _users, _currentUser, _onUserClick, _onInviteUser, _className = '',  }) => { const [isExpanded, setIsExpanded] = useState(false); const [filter, setFilter] = useState<'all' | 'online' | 'active'>('all'); const activeUsers = users.filter((user) => user.presence?.isOnline); const recentlyActiveUsers = users.filter((user) => { if (!user.presence?.lastSeen) return false; const lastSeenTime = new Date(user.presence.lastSeen).getTime(); const fiveMinutesAgo = Date.now() - 5 * 60 * 1000; return lastSeenTime > fiveMinutesAgo; }); const getFilteredUsers = () => { switch (filter) { case 'online': return activeUsers; case 'active': return recentlyActiveUsers; default: return users; } }; const filteredUsers = getFilteredUsers(); return ( <div className={`bg-white border border-gray-200 rounded-lg shadow-sm ${className}`}> {/* Header */} <div className="flex items-center justify-between p-4 border-b border-gray-100"> <div className="flex items-center space-x-3"> <h3 className="text-sm font-medium text-gray-900">Collaborators</h3> <div className="flex items-center space-x-1"> <div className="w-2 h-2 bg-green-400 rounded-full"></div> <span className="text-xs text-gray-500">{activeUsers.length} active</span> </div> </div> <div className="flex items-center space-x-2"> {/* Filter Buttons */} <div className="flex bg-gray-100 rounded-md"> {(['all', 'online', 'active'] as const).map((filterOption) => ( <button key={filterOption} className={` px-2 py-1 text-xs rounded-md transition-colors ${ filter === filterOption ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900' } `} onClick={() => setFilter(filterOption)} > {filterOption === 'all' && 'All'} {filterOption === 'online' && 'Online'} {filterOption === 'active' && 'Active'} </button> ))} </div> {/* Invite Button */} {currentUser.permissions.includes(Permission.INVITE_USERS) && onInviteUser && ( <button className="p-1 text-gray-400 hover:text-gray-600 transition-colors" onClick={onInviteUser} title="Invite collaborators" > <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" /> </svg> </button> )} {/* Expand/Collapse */} <button className="p-1 text-gray-400 hover:text-gray-600 transition-colors" onClick={() => setIsExpanded(!isExpanded)} > <svg className={`w-4 h-4 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" /> </svg> </button> </div> </div> {/* Compact View */} {!isExpanded && ( <div className="p-3"> <UserAvatarGroup users={activeUsers} maxVisible={6} size="sm" showPresence showActivity onUserClick={onUserClick} onViewAll={() => setIsExpanded(true)} /> </div> )} {/* Expanded View */} {isExpanded && ( <div className="max-h-80 overflow-y-auto"> {/* Current User */} <div className="p-3 bg-blue-50 border-b border-blue-100"> <div className="flex items-center justify-between"> <UserStatusBadge user={currentUser} variant="compact" /> <span className="text-xs text-blue-600 font-medium">You</span> </div> </div> {/* Other Users */} <div className="divide-y divide-gray-100"> {filteredUsers .filter((user) => user.id !== currentUser.id) .sort((a, _b) => { // Sort by online status first, then by role, then by name const aOnline = a.presence?.isOnline ? 1 : 0; const bOnline = b.presence?.isOnline ? 1 : 0; if (aOnline !== bOnline) return bOnline - aOnline; const roleOrder = { owner: 4, admin: 3, editor: 2, viewer: 1, guest: 0 }; const aRole = roleOrder[a.role as keyof typeof roleOrder] || 0; const bRole = roleOrder[b.role as keyof typeof roleOrder] || 0; if (aRole !== bRole) return bRole - aRole; return a.displayName.localeCompare(b.displayName); }) .map((user) => ( <div key={user.id} className="p-3 hover:bg-gray-50 transition-colors"> <div className="flex items-center justify-between"> <div className="cursor-pointer" onClick={() => onUserClick?.(user)}> <UserStatusBadge user={user} variant="compact" /> </div> <div className="flex items-center space-x-2"> {/* Activity Status */} {user.presence?.currentActivity && user.presence.isOnline && ( <div className="flex items-center space-x-1"> <ActivityIndicator activity={user.presence.currentActivity} /> </div> )} {/* User Role Badge */} <RoleBadge role={user.role} /> </div> </div> {/* User Activity Details */} {user.presence?.currentActivity && user.presence.isOnline && ( <div className="mt-2 text-xs text-gray-500"> <ActivityDescription activity={user.presence.currentActivity} /> </div> )} </div> ))} {filteredUsers.filter((user) => user.id !== currentUser.id).length === 0 && ( <div className="p-6 text-center text-gray-500"> <svg className="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" /> </svg> <p className="text-sm">No {filter === 'all' ? 'other' : filter} collaborators</p> {onInviteUser && currentUser.permissions.includes(Permission.INVITE_USERS) && ( <button className="mt-2 text-xs text-blue-600 hover:text-blue-700 font-medium" onClick={onInviteUser} > Invite people to collaborate </button> )} </div> )} </div> </div> )} </div> ); }; /* ========= Activity Indicator Component ========= */ interface ActivityIndicatorProps { activity: UserActivity; size?: 'sm' | 'md'; className?: string; } const ActivityIndicator: React.FC<ActivityIndicatorProps> = ({ activity, _size = 'sm', _className = '',  }) => { const getActivityColor = (_type: ActivityType) => { const colors = { [ActivityType.VIEWING_BOARD]: 'text-blue-500', [ActivityType.EDITING_CARD]: 'text-green-500', [ActivityType.MOVING_CARD]: 'text-purple-500', [ActivityType.CREATING_CARD]: 'text-indigo-500', [ActivityType.EDITING_COLUMN]: 'text-orange-500', [ActivityType.CREATING_VIEW]: 'text-pink-500', [ActivityType.IDLE]: 'text-gray-400', }; return colors[type] || 'text-gray-400'; }; const getActivityIcon = (_type: ActivityType) => { const icons = { [ActivityType.VIEWING_BOARD]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /> </svg> ), [ActivityType.EDITING_CARD]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /> </svg> ), [ActivityType.MOVING_CARD]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16l-4-4m0 0l4-4m-4 4h18" /> </svg> ), [ActivityType.CREATING_CARD]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" /> </svg> ), [ActivityType.EDITING_COLUMN]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" /> </svg> ), [ActivityType.CREATING_VIEW]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /> </svg> ), [ActivityType.IDLE]: ( <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" /> </svg> ), }; return icons[type] || icons[ActivityType.IDLE]; }; const sizeClasses = { sm: 'w-3 h-3', md: 'w-4 h-4', }; return ( <div className={`${sizeClasses[size]} ${getActivityColor(activity.type)} ${className}`}> {getActivityIcon(activity.type)} </div> ); }; /* ========= Activity Description Component ========= */ interface ActivityDescriptionProps { activity: UserActivity; className?: string; } const ActivityDescription: React.FC<ActivityDescriptionProps> = ({ activity, _className = '' }) => { const getDescription = () => { const timeSince = Date.now() - new Date(activity.timestamp).getTime(); const minutesAgo = Math.floor(timeSince / (1000 * 60)); const timeText = minutesAgo < 1 ? 'just now' : `${minutesAgo}m ago`; const descriptions = { [ActivityType.VIEWING_BOARD]: `Viewing the board • ${timeText}`, [ActivityType.EDITING_CARD]: `Editing a card • ${timeText}`, [ActivityType.MOVING_CARD]: `Moving cards around • ${timeText}`, [ActivityType.CREATING_CARD]: `Creating a new card • ${timeText}`, [ActivityType.EDITING_COLUMN]: `Editing a column • ${timeText}`, [ActivityType.CREATING_VIEW]: `Creating a new view • ${timeText}`, [ActivityType.IDLE]: `Idle • ${timeText}`, }; return descriptions[activity.type] || `Active • ${timeText}`; }; return <span className={className}>{getDescription()}</span>; }; /* ========= Role Badge Component ========= */ interface RoleBadgeProps { role: UserRole; size?: 'sm' | 'md'; className?: string; } const RoleBadge: React.FC<RoleBadgeProps> = ({ role, _size = 'sm', _className = '' }) => { const getRoleColor = (_role: UserRole) => { const colors = { [UserRole.OWNER]: 'bg-purple-100 text-purple-800', [UserRole.ADMIN]: 'bg-red-100 text-red-800', [UserRole.EDITOR]: 'bg-blue-100 text-blue-800', [UserRole.VIEWER]: 'bg-gray-100 text-gray-800', [UserRole.GUEST]: 'bg-yellow-100 text-yellow-800', }; return colors[role] || colors[UserRole.VIEWER]; }; const sizeClasses = { sm: 'px-2 py-0.5 text-xs', md: 'px-2.5 py-1 text-sm', }; return ( <span className={` inline-flex items-center rounded-full font-medium ${getRoleColor(role)} ${sizeClasses[size]} ${className} `} > {role.charAt(0).toUpperCase() + role.slice(1)} </span> ); };
