// src/hooks/useDebounced.ts import { useState, useEffect } from 'react'; /** * Hook that debounces a value, delaying updates until after a specified delay * @param value The value to debounce * @param delay The delay in milliseconds * @returns The debounced value */ export function useDebounced<T>(value: T, delay: number): T { const [debouncedValue, setDebouncedValue] = useState<T>(value); useEffect(() => { const handler = setTimeout(() => { setDebouncedValue(value); }, delay); return () => { clearTimeout(handler); }; }, [value, delay]); return debouncedValue; } /** * Hook that provides debounced search functionality with loading states * @param initialValue Initial search query * @param delay Debounce delay in milliseconds * @returns Object with current query, debounced query, and loading state */ export function useDebouncedSearch(initialValue = '', delay = 300) { const [query, setQuery] = useState(initialValue); const debouncedQuery = useDebounced(query, delay); const [isSearching, setIsSearching] = useState(false); useEffect(() => { if (query !== debouncedQuery) { setIsSearching(true); } else { setIsSearching(false); } }, [query, debouncedQuery]); return { query, debouncedQuery, isSearching, setQuery, }; } 