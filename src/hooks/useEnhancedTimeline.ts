// src/hooks/useEnhancedTimeline.ts import { useEffect, useMemo, useState } from 'react'; import { timelineService, within } from '@/services/timelineService'; import type { TimelineItem, TimelineRange } from '@/types/timeline'; type Params = { projectId: string; /** Optional initial visible range; defaults to “everything”. */ range?: TimelineRange; }; export function _useEnhancedTimeline({ projectId, range }: Params) { const [items, setItems] = useState<TimelineItem[]>([]); const [loading, setLoading] = useState(false); const [error, setError] = useState<unknown>(null); const [activeRange, setActiveRange] = useState<TimelineRange>( range ?? { start: Number.MIN_SAFE_INTEGER, end: Number.MAX_SAFE_INTEGER }, ); // Load items useEffect(() => { let cancelled = false; setLoading(true); timelineService .getProjectTimeline(projectId) .then((it) => !cancelled && setItems(it)) .catch((e) => !cancelled && setError(e)) .finally(() => !cancelled && setLoading(false)); return () => { cancelled = true; }; }, [projectId]); // Visible items in the active range const visible = useMemo(() => within(items, activeRange), [items, activeRange]); // Public API const refresh = async () => { const it = await timelineService.getProjectTimeline(projectId); setItems(it); }; return { items, visible, loading, error, range: activeRange, setRange: setActiveRange, refresh, }; }
